def C_variables_macro(model_G):
    import streamlit as st
    import numpy as np
    import pandas as pd
    
    st.header("üìä Predicci√≥n con Variables Macroecon√≥micas")
    
    # Descripci√≥n del modelo
    st.write("Predice el precio de la leche bas√°ndose √∫nicamente en variables macroecon√≥micas clave: IPC y tipo de cambio oficial.")
    
    # Informaci√≥n del modelo
    with st.expander("‚ÑπÔ∏è Informaci√≥n del Modelo"):
        st.write("**Tipo de Modelo:** RandomForest")
        st.write("**Preprocesamiento:** Datos Originales (sin estandarizaci√≥n)")
        st.write("**R¬≤ Esperado:** 0.999706")
        st.write("**Variables utilizadas:**")
        st.write("- IPC-Mensual")
        st.write("- DOLAR OFICIAL $/US$")
    
    # Crear columnas para inputs
    col1, col2 = st.columns(2)
    
    with col1:
        ipc_mensual = st.number_input(
            label="üìä IPC-Mensual",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_ipc_macro",
            help="√çndice de Precios al Consumidor mensual acumulado"
        )
        
        # Informaci√≥n adicional sobre IPC
        with st.expander("‚ÑπÔ∏è C√≥mo calcular el IPC"):
            st.write("""
            **Para calcular el IPC acumulado:**
            - Valor base: 98 (inicio de serie)
            - √öltimo valor oficial: 7864,1257 (enero 2025)
            - Para febrero 2025: 7864,1257 √ó 1,021 (2,1% inflaci√≥n)
            - Para marzo 2025: resultado anterior √ó 1,037 (3,7% inflaci√≥n)
            - Continuar multiplicando por coeficientes mensuales
            """)
    
    with col2:
        dolar_oficial = st.number_input(
            label="üíµ DOLAR OFICIAL $/US$ (ARS)",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_dolar_macro",
            help="Tipo de cambio oficial USD/ARS"
        )
        
        # Informaci√≥n adicional sobre d√≥lar
        with st.expander("‚ÑπÔ∏è Informaci√≥n del Tipo de Cambio"):
            st.write("""
            **Tipo de Cambio Oficial:**
            - Cotizaci√≥n del Banco Central (BCRA)
            - Diferente del d√≥lar blue o financiero
            - Impacta directamente en costos de insumos
            - Afecta competitividad exportadora
            """)
    
    # Funci√≥n para hacer predicci√≥n con manejo correcto del scaler
    def hacer_prediccion_variables_macro(modelo_completo, valores):
        # Crear DataFrame con nombres de columnas correctos
        feature_names = ['IPC-Mensual', 'DOLAR OFICIAL $/US$']
        df_entrada = pd.DataFrame([valores], columns=feature_names)
        
        # Aplicar preprocesamiento si es necesario
        if modelo_completo.get('scaler') is not None:
            st.info("‚úÖ Aplicando preprocesamiento")
            datos_procesados = modelo_completo['scaler'].transform(df_entrada)
            # Convertir de vuelta a DataFrame para mantener nombres de columnas
            datos_procesados = pd.DataFrame(datos_procesados, columns=feature_names)
        else:
            st.info("‚úÖ Usando datos originales (sin preprocesamiento - no se estandarizan ni se normalizan)")
            datos_procesados = df_entrada
        
        # Hacer predicci√≥n
        prediccion = modelo_completo['modelo'].predict(datos_procesados)
        return prediccion[0]
    
    # Bot√≥n para realizar predicci√≥n
    if st.button("üîÆ Predecir Precio con Variables Macro", key="boton_variables_macro"):
        # Validar que no haya valores negativos
        valores = [ipc_mensual, dolar_oficial]
        
        if any(v < 0 for v in valores):
            st.error("‚ùå Por favor, ingrese solo valores positivos.")
        elif any(v == 0 for v in valores):
            st.warning("‚ö†Ô∏è Algunos valores son cero. Verifique que sean correctos.")
        else:
            try:
                # Verificar si el modelo es el formato completo PKL o solo el modelo sklearn
                if isinstance(model_G, dict) and 'modelo' in model_G:
                    # Es el formato completo PKL
                    prediccion = hacer_prediccion_variables_macro(model_G, valores)
                    st.success(f"ü•õ **Precio de Leche Predicho: ${prediccion:.6f}/litro**")
                    
                    # Mostrar detalles adicionales
                    st.subheader("üìä Detalles de la Predicci√≥n")
                    col_det1, col_det2 = st.columns(2)
                    
                    with col_det1:
                        st.metric("Precio/litro Nacional", f"${prediccion:.6f}")
                        
                        # Calcular precio mensual por vaca (estimado)
                        litros_vaca_mes = 500  # litros promedio por vaca por mes
                        ingreso_vaca_mes = prediccion * litros_vaca_mes
                        st.metric("Ingreso estimado por vaca/mes", f"${ingreso_vaca_mes:,.0f}")
                        
                        st.write(f"**Tipo de Modelo:** {model_G.get('tipo_modelo', 'N/A')}")
                        st.write(f"**Preprocesamiento:** {model_G.get('preprocesamiento', 'N/A')}")
                    
                    with col_det2:
                        if 'metricas' in model_G:
                            st.write(f"**R¬≤ Esperado:** {model_G['metricas'].get('r2', 'N/A'):.6f}")
                            st.write(f"**MSE Esperado:** {model_G['metricas'].get('mse', 'N/A'):.6f}")
                        
                        # An√°lisis de variables macroecon√≥micas
                        if dolar_oficial > 0:
                            precio_usd = prediccion / dolar_oficial
                            st.metric("Precio en USD", f"USD {precio_usd:.4f}/litro")
                    
                    # An√°lisis del contexto macroecon√≥mico
                    st.subheader("üîç An√°lisis Macroecon√≥mico")
                    col_analisis1, col_analisis2 = st.columns(2)
                    
                    with col_analisis1:
                        if ipc_mensual > 8000:
                            st.error("üî¥ IPC Alto: Alta inflaci√≥n acumulada")
                        elif ipc_mensual > 5000:
                            st.warning("üü° IPC Moderado: Inflaci√≥n controlada")
                        else:
                            st.success("üü¢ IPC Bajo: Estabilidad de precios")
                    
                    with col_analisis2:
                        if dolar_oficial > 1500:
                            st.warning("üí∞ D√≥lar Alto: Impacto en costos de insumos")
                        elif dolar_oficial > 1000:
                            st.info("üìä D√≥lar Moderado: Nivel intermedio")
                        else:
                            st.success("üíö D√≥lar Estable: Favorece estabilidad de costos")
                    
                    # Tendencias y proyecciones
                    st.subheader("üìà Interpretaci√≥n Econ√≥mica")
                    st.write("**Correlaci√≥n IPC-Precio:** El IPC es un fuerte predictor del precio de la leche")
                    st.write("**Impacto Cambiario:** El d√≥lar oficial afecta costos de insumos y competitividad")
                    st.write("**Modelo Simplificado:** Este modelo usa solo 2 variables pero logra alta precisi√≥n")
                    
                else:
                    # Es solo el modelo sklearn (formato antiguo)
                    st.warning("‚ö†Ô∏è Modelo en formato legacy. Aplicando predicci√≥n directa.")
                    datos_entrada = np.array([valores])
                    prediccion = model_G.predict(datos_entrada)
                    st.success(f"ü•õ **Precio de Leche Predicho: ${prediccion[0]:.6f}/litro**")
                
                # Interpretaci√≥n de resultados
                st.subheader("üìä Interpretaci√≥n del Precio")
                if prediccion > 150:
                    st.error("üî¥ Precio Alto: Por encima del promedio hist√≥rico")
                elif prediccion > 100:
                    st.warning("üü° Precio Moderado: Dentro del rango normal")
                elif prediccion > 50:
                    st.success("üü¢ Precio Competitivo: Favorable para el sector")
                else:
                    st.info("üîµ Precio Bajo: Verificar condiciones del mercado")
                
                # Escenarios econ√≥micos
                st.subheader("üéØ Escenarios Econ√≥micos")
                st.write("üí° **Escenario Inflacionario:** IPC alto genera aumentos de precios l√°cteos")
                st.write("üí± **Escenario Cambiario:** D√≥lar alto encarece insumos pero mejora exportaciones")
                st.write("‚öñÔ∏è **Equilibrio:** Balance entre inflaci√≥n y tipo de cambio determina rentabilidad")
                
            except Exception as e:
                st.error(f"‚ùå Error en la predicci√≥n: {str(e)}")
                
                # Informaci√≥n de debug
                with st.expander("üîß Informaci√≥n de Debug"):
                    st.write("**Valores ingresados:**", valores)
                    st.write("**Tipo de modelo:**", type(model_G))
                    st.write("**Detalles del error:**", str(e))
    
    # Informaci√≥n contextual
    st.subheader("üìã Informaci√≥n Macroecon√≥mica")
    col_info1, col_info2 = st.columns(2)
    
    with col_info1:
        st.info("""
        **IPC (√çndice de Precios al Consumidor):**
        - Mide la evoluci√≥n de precios de bienes y servicios
        - Indicador principal de inflaci√≥n
        - Base 2016 = 100 (serie actual)
        - Publicado mensualmente por INDEC
        """)
    
    with col_info2:
        st.info("""
        **D√≥lar Oficial:**
        - Cotizaci√≥n oficial del BCRA
        - Usado para operaciones comerciales
        - Impacta en costos de importaci√≥n
        - Afecta competitividad exportadora
        """)
    
    # Ventajas del modelo simplificado
    st.subheader("‚ú® Ventajas del Modelo Macroecon√≥mico")
    st.success("""
    **üéØ Simplicidad:** Solo 2 variables f√°ciles de obtener
    **üìä Alta Precisi√≥n:** R¬≤ > 0.999 con variables b√°sicas
    **üîÑ Actualizaci√≥n R√°pida:** Datos disponibles mensualmente
    **üìà Interpretaci√≥n Clara:** Relaci√≥n directa inflaci√≥n-precios
    **üåê Visi√≥n Macro:** Se enfoca en tendencias econ√≥micas generales
    """)
    
    # Mostrar informaci√≥n adicional
    st.subheader("üí° Consejos de Uso")
    st.info("""
    **Para obtener mejores predicciones:**
    - Use el IPC m√°s reciente disponible del INDEC
    - El IPC debe ser acumulado, no el porcentaje mensual
    - Use el tipo de cambio oficial vigente
    - Considere tendencias trimestrales para mejor contexto
    - Este modelo es ideal para an√°lisis macroecon√≥micos r√°pidos
    """)