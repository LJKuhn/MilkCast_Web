def C_costos(model_B):
    import streamlit as st
    import numpy as np
    import pandas as pd
    
    st.header("üí∞ Predicci√≥n de Costos")
    
    # Descripci√≥n del modelo
    st.write("Predice los costos de producci√≥n l√°ctea bas√°ndose en promedios sectoriales, relaciones econ√≥micas y variables macroecon√≥micas.")
    
    # Informaci√≥n del modelo
    with st.expander("‚ÑπÔ∏è Informaci√≥n del Modelo"):
        st.write("**Tipo de Modelo:** RandomForest")
        st.write("**Preprocesamiento:** Datos Originales (sin estandarizaci√≥n)")
        st.write("**R¬≤ Esperado:** 0.999726")
        st.write("**Variables utilizadas:**")
        st.write("- Promedio del sector")
        st.write("- RELACION LECHE/MAIZ") 
        st.write("- IPIM Nivel General - INDEC")
        st.write("- DOLAR OFICIAL $/US$")
        st.write("- RELACION VAQUILLONA AL PARIR - LECHE")
        st.write("- IPC - INDEC CoberNac")
    
    # Crear columnas para inputs
    col1, col2 = st.columns(2)
    
    with col1:
        promedio_sector = st.number_input(
            label="üìà Promedio del sector",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_promedio_sector_costos",
            help="Promedio general del sector l√°cteo"
        )
        
        relacion_leche_maiz = st.number_input(
            label="üåΩ RELACION LECHE/MAIZ",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_relacion_leche_maiz",
            help="Relaci√≥n de precios entre leche y ma√≠z"
        )
        
        ipim_general = st.number_input(
            label="üè≠ IPIM Nivel General - INDEC",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_ipim_costos",
            help="√çndice de Precios Internos al por Mayor"
        )
    
    with col2:
        dolar_oficial = st.number_input(
            label="üíµ DOLAR OFICIAL $/US$ (ARS)",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_dolar_costos",
            help="Tipo de cambio oficial USD/ARS"
        )
        
        relacion_vaquillona_leche = st.number_input(
            label="üêÑ RELACION VAQUILLONA AL PARIR - LECHE",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_relacion_vaquillona",
            help="Relaci√≥n entre precio de vaquillona y leche"
        )
        
        ipc_cobernac = st.number_input(
            label="üìä IPC - INDEC CoberNac",
            min_value=0.0,
            step=0.01,
            format="%.6f",
            key="input_ipc_cobernac",
            help="IPC con cobertura nacional"
        )
    
    # Funci√≥n para hacer predicci√≥n con manejo correcto del scaler
    def hacer_prediccion_costos(modelo_completo, valores):
        # Crear DataFrame con nombres de columnas correctos
        feature_names = ['Promedio del sector', 'RELACION LECHE/MAIZ', 'IPIM Nivel General - INDEC',
                        'DOLAR OFICIAL $/US$', 'RELACION VAQUILLONA AL PARIR - LECHE', 'IPC - INDEC CoberNac']
        df_entrada = pd.DataFrame([valores], columns=feature_names)
        
        # Aplicar preprocesamiento si es necesario
        if modelo_completo.get('scaler') is not None:
            st.info("‚úÖ Aplicando preprocesamiento")
            datos_procesados = modelo_completo['scaler'].transform(df_entrada)
            # Convertir de vuelta a DataFrame para mantener nombres de columnas
            datos_procesados = pd.DataFrame(datos_procesados, columns=feature_names)
        else:
            st.info("‚úÖ Usando datos originales (sin preprocesamiento - no se estandarizan ni se normalizan)")
            datos_procesados = df_entrada
        
        # Hacer predicci√≥n
        prediccion = modelo_completo['modelo'].predict(datos_procesados)
        return prediccion[0]
    
    # Bot√≥n para realizar predicci√≥n
    if st.button("üîÆ Predecir Costos", key="boton_costos"):
        # Validar que no haya valores negativos
        valores = [promedio_sector, relacion_leche_maiz, ipim_general, dolar_oficial, relacion_vaquillona_leche, ipc_cobernac]
        
        if any(v < 0 for v in valores):
            st.error("‚ùå Por favor, ingrese solo valores positivos.")
        elif any(v == 0 for v in valores):
            st.warning("‚ö†Ô∏è Algunos valores son cero. Verifique que sean correctos.")
        else:
            try:
                # Verificar si el modelo es el formato completo PKL o solo el modelo sklearn
                if isinstance(model_B, dict) and 'modelo' in model_B:
                    # Es el formato completo PKL
                    prediccion = hacer_prediccion_costos(model_B, valores)
                    st.success(f"üí∞ **Costo Predicho: ${prediccion:.6f}**")
                    
                    # Mostrar detalles adicionales
                    st.subheader("üìä Detalles de la Predicci√≥n")
                    col_det1, col_det2 = st.columns(2)
                    
                    with col_det1:
                        st.metric("Costo de Producci√≥n", f"${prediccion:.6f}")
                        st.write(f"**Tipo de Modelo:** {model_B.get('tipo_modelo', 'N/A')}")
                        st.write(f"**Preprocesamiento:** {model_B.get('preprocesamiento', 'N/A')}")
                    
                    with col_det2:
                        if 'metricas' in model_B:
                            st.write(f"**R¬≤ Esperado:** {model_B['metricas'].get('r2', 'N/A'):.6f}")
                            st.write(f"**MSE Esperado:** {model_B['metricas'].get('mse', 'N/A'):.6f}")
                    
                else:
                    # Es solo el modelo sklearn (formato antiguo)
                    st.warning("‚ö†Ô∏è Modelo en formato legacy. Aplicando predicci√≥n directa.")
                    datos_entrada = np.array([valores])
                    prediccion = model_B.predict(datos_entrada)
                    st.success(f"üí∞ **Costo Predicho: ${prediccion[0]:.6f}**")
                
                # Interpretaci√≥n de resultados
                st.subheader("üìà Interpretaci√≥n")
                if prediccion > 100:
                    st.error("üî¥ Costos Altos: Evaluar estrategias de reducci√≥n de costos")
                elif prediccion > 50:
                    st.warning("üü° Costos Moderados: Monitorear tendencias del mercado")
                else:
                    st.success("üü¢ Costos Controlados: Condiciones favorables de producci√≥n")
                
                # An√°lisis de factores influyentes
                st.subheader("üîç Factores M√°s Influyentes")
                st.write("**Relaci√≥n Leche/Ma√≠z:** Impacta directamente en costos de alimentaci√≥n")
                st.write("**D√≥lar Oficial:** Afecta costos de insumos importados")
                st.write("**IPIM:** Refleja inflaci√≥n en precios al por mayor")
                
            except Exception as e:
                st.error(f"‚ùå Error en la predicci√≥n: {str(e)}")
                
                # Informaci√≥n de debug
                with st.expander("üîß Informaci√≥n de Debug"):
                    st.write("**Valores ingresados:**", valores)
                    st.write("**Tipo de modelo:**", type(model_B))
                    st.write("**Detalles del error:**", str(e))
    
    # Mostrar informaci√≥n adicional
    st.subheader("üí° Consejos de Uso")
    st.info("""
    **Para obtener mejores predicciones de costos:**
    - Mantenga actualizados los valores del IPIM e IPC
    - La relaci√≥n leche/ma√≠z es clave para costos de alimentaci√≥n
    - Considere el impacto del d√≥lar en insumos importados
    - El promedio sectorial debe reflejar condiciones actuales
    - Las relaciones de precios deben ser consistentes temporalmente
    """)